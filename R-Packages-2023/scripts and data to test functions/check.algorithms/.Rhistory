closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
bn.learn.algorithms <- c("gs", "hc")
check.algorithms(bn.learn.algorithms)
bn.learn.algorithms <- c("tabu-search", "mhc")
check.algorithms(bn.learn.algorithms)
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
data.to.work <- dataQuantC
head(data.to.work)
str(data.to.work)
variable.name = "A"
check.dichotomic.one.var(data.to.work, variable.name)
data.to.work$Z <- round(runif(500, min=0, max=1),0)
str(data.to.work)
variable.name = "Z"
check.dichotomic.one.var(data.to.work, variable.name)
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
data.to.work <- dataQualiN
head(data.to.work)
data.to.work$Z <- round(runif(500, min=0, max=1000),2)
closeAllConnections()
variable.name = "Z"
number.of.levels <- check.levels.one.variable(data.to.work, variable.name)
number.of.levels
variable.name = "A"
number.of.levels <- check.levels.one.variable(data.to.work, variable.name)
number.of.levels
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
data.to.work <- dataQuantC
head(data.to.work)
data.to.work <- as.data.frame(lapply(data.to.work, function(cc) cc[ sample(c(TRUE, NA),
prob = c(0.85, 0.15), size = length(cc), replace = TRUE) ]))
check.na(data.to.work)
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
v1 <- factor(c("a", "a", "b", "a", "b", "a", "b", "b"))
v2 <- ordered(c("c", "b", "b", "c", "a", "d", "a", "b"))
data.to.work <- data.frame(v1,n1=1:8,v2)
var.name = "v1"
check.ordered.one.var(data.to.work, var.name)
closeAllConnections()
rm(list=ls())
# Set enviroment
setwd("~/your working directory")
# Load packages
library(bnpa)
# create a dataset to work
v1 <- factor(c("a", "a", "b", "a", "b", "a", "b", "b"))
v2 <- ordered(c("c", "b", "b", "c", "a", "d", "a", "b"))
data.to.work <- data.frame(v1,n1=1:8,v2)
# Check and return a numeric value
# Set an unordered variable
var.name = "v1"
# Test it
check.ordered.one.var(data.to.work, var.name)
var.name = "v2"
check.ordered.one.var(data.to.work, var.name)
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
library(bnpa)
data.to.work <- dataQualiN # Pre-Loaded
data.to.work$A <- as.ordered(data.to.work$A)
data.to.work$B <- as.ordered(data.to.work$B)
bn.structure<-bnlearn::hc(data.to.work)
cat.var.to.use.in.pa <- bnpa::check.ordered.to.pa(bn.structure, data.to.work)
cat.var.to.use.in.pa
bnlearn::graphviz.plot(bn.structure)
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
data.to.work <- dataQualiN # Pre-Loaded
data.to.work$A <- as.ordered(data.to.work$A)
data.to.work$B <- as.ordered(data.to.work$B)
bn.structure<-bnlearn::hc(data.to.work)
bnlearn::graphviz.plot(bn.structure)
cat.var.to.use.in.pa <- bnpa::check.ordered.to.pa(bn.structure, data.to.work)
cat.var.to.use.in.pa
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
data.to.work <- dataQuantC # Pre-Loaded
ask.before = "Y" # or ask.before = "N"
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
data.to.work <- dataQuantC # Pre-Loaded
ask.before = "Y" # or ask.before = "N"
dataQuantC <- check.outliers(dataQuantC, ask.before)
dataQuantC <- check.outliers(dataQuantC, ask.before)
head(data.to.work)
data.to.work$Z <- round(runif(500, min=0, max=1000),2)
data.to.work$Z <- factor(data.to.work$Z)
variable.name = "Z"
check.type.one.var(data.to.work, show.message=0, variable.name )
variable.name = "A"
check.type.one.var(data.to.work, show.message=0, variable.name )
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
data.to.work <- dataQuantC
head(data.to.work)
show.message <- 1
bnpa::check.types(data.to.work, show.message)
data.to.work$Z <- round(runif(500, min=0, max=1000),2)
data.to.work$Z <- factor(data.to.work$Z)
show.message <- 1
bnpa::check.types(data.to.work, show.message)
show.message <- 0
bnpa::check.types(data.to.work, show.message)
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
data.to.work <- dataQualiN
head(data.to.work)
data.to.work$test.variable[data.to.work$A == "yes"] <- "low"
data.to.work$test.variable[data.to.work$B == "yes"] <- "medium"
data.to.work$test.variable[data.to.work$X == "yes"] <- "high"
data.to.work$test.variable <- as.factor(data.to.work$test.variable)
bnpa::check.variables.to.be.ordered(data.to.work)
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
confusion.matrix <-matrix(c(12395, 4, 377, 1), nrow=2, ncol=2, byrow=T)
cm.position <- c(4,3,2,1)
confusion.matrix
confusion.matrix <- convert.confusion.matrix(confusion.matrix, cm.position)
confusion.matrix
# Clean environment
closeAllConnections()
rm(list=ls())
# Set enviroment
setwd("~/your working directory")
# Creates a confusion matrix
confusion.matrix <-matrix(c(12395, 4, 377, 1), nrow=2, ncol=2, byrow=T)
# Creates a vector with the position of VP, FP, FN, VN
cm.position <- c(4,3,2,1)
# Shows the original confusion matrix
confusion.matrix
convert.confusion.matrix(confusion.matrix, cm.position)
confusion.matrix <- convert.confusion.matrix(confusion.matrix, cm.position)
