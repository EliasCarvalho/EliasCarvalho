{
# Identify categorical variables
# Check the type of variable
type.variable <- bnpa::check.type.one.var(data.to.work, show.message=0, variable.name)
# variable.type <- "factor" creates a list of categorical vars
if (type.variable == 3)
{
categorical.variables <- paste(categorical.variables, variable.name)
} #  if (type.variable == 3)
} # for
categorical.variables <- ""
# scann all variables
for (variable.name in names(data.to.work))
{
# Identify categorical variables
# Check the type of variable
type.variable <- bnpa::check.type.one.var(data.to.work, show.message=0, variable.name)
# variable.type <- "factor" creates a list of categorical vars
if (type.variable == 3)
{
categorical.variables <- paste(categorical.variables, variable.name)
} #  if (type.variable == 3)
} # for (variable.name in names(data.to.work))
categorical.variables
for (variable.name in names(data.to.work))
{
# Identify categorical variables
# Check the type of variable
type.variable <- bnpa::check.type.one.var(data.to.work, show.message=0, variable.name)
# variable.type <- "factor" creates a list of categorical vars
if (type.variable == 3)
{
categorical.variables <- paste(categorical.variables,"',", variable.name)
} #  if (type.variable == 3)
} #
categorical.variables
categorical.variables <- ""
# scann all variables
for (variable.name in names(data.to.work))
{
# Identify categorical variables
# Check the type of variable
type.variable <- bnpa::check.type.one.var(data.to.work, show.message=0, variable.name)
# variable.type <- "factor" creates a list of categorical vars
if (type.variable == 3)
{
categorical.variables <- paste(categorical.variables,"',", variable.name, sep = "")
} #  if (type.variable == 3)
} #
categorical.variables
categorical.variables <- ""
# scann all variables
for (variable.name in names(data.to.work))
{
# Identify categorical variables
# Check the type of variable
type.variable <- bnpa::check.type.one.var(data.to.work, show.message=0, variable.name)
# variable.type <- "factor" creates a list of categorical vars
if (type.variable == 3)
{
categorical.variables <- paste(categorical.variables,"', '", variable.name, sep = "")
} #  if (type.variable == 3)
} # for (v
categorical.variables
if (variables.to.table1 == "all")
variables.to.table1 <- names(data.to.work)
variable.to.table1<-"all"
variables.to.table1 <- names(data.to.work)
commandAssign <- ""
for (x in 1:length(names(data.to.work)))
{
# Check the type of variable
type.variable <- bnpa::check.type.one.var(data.to.work, show.message=0, names(data.to.work[x]))
# variable.type <- "factor" creates a list of categorical vars
if (type.variable == 3)
{
# if is the first round
if (commandAssign == "")
{
commandAssign <- paste("categorical.variables <-c('", names(data.to.work[x]), sep = "")
} else
{
commandAssign <- paste(commandAssign,"', '", names(data.to.work[x]), sep = "")
} # if (x == 1)
} #  if (type.variable == 3)
} # for (variable.name in names(data.to.work))
commandAssign <- paste(commandAssign,"')", sep = "")
commandAssign
eval(parse(text=commandAssign))
table1 <- tableone::CreateTableOne(vars = names(data.to.work), data = data.to.work,
factorVars = categorical.variables)
table1
docx( ) %>%
addFlexTable(table1 %>%
FlexTable(header.cell.props = cellProperties( background.color = "#003366"),
header.text.props = textBold( color = "white" ),
add.rownames = TRUE ) %>%
setZebraStyle( odd = "#DDDDDD", even = "#FFFFFF" ) ) %>%
writeDoc(file = "table1.docx")
install.packages("ReporteRs")
install.packages("rJava")
install.packages("~/Documentos/R-Packages/bnpa_0.3.0.tar.gz", repos = NULL, type = "source")
check.package("mice")
library("bnpa", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
check.package("mice")
check.na(data.to.work)
library(bnpa)
check.na(data.to.work)
data.to.work$IMC <- NULL
data.to.work$CC  <- NULL
data.to.work <- imput.missing.data(data.to.work)
summary(data.to.work)
variables.to.table1 <- "all"
descritive.table(data.to.work, variables.to.table1)
library("bnpa", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
descritive.table(data.to.work, variables.to.table1)
data(PoliticalDemocracy)
data(PoliticalDemocracy)
library(lavaan)
install.packages("lavaan")
library(lavaan)
data(PoliticalDemocracy)
PoliticalDemocracy
View(data.to.work)
View(data.to.work)
View(PoliticalDemocracy)
df
install.packages("bnlearn")
data(coronary)
library("bnlearn", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
data(coronary)
head(coronary)
for (x in 1:nrow(complete.numeric.data))
{
# Verify if the Id change, if yes then choose the best imputation
if (data.id != as.numeric(complete.numeric.data$.id[x]) && y !=0)
{
cat(paste("\ndf",y,": ", df, sep = ""))
# Choose the best imputation by mode
new.data.to.work$LDL[record.number] <- as.numeric(Mode(df))
# Set the next record for new data set
record.number <- record.number + 1
# Update the data id with the currently data id
data.id <- as.numeric(complete.numeric.data$.id[x])
# set the initial position to the begining of df to held the new values
y <- 1
# update the df with first value of new id
df[y] <- complete.numeric.data$LDL[x]
} else  # if (data.id != as.numeric(complete.numeric.data$.id[x]) && y !=0)
{
# Add one to counter to store the next new value
y = y + 1
# update the df with value of the new id
df[y] <- complete.numeric.data$LDL[x]
# Store the N imputed values for each variable
for (w in 3:(length(names(complete.numeric.data))-2))
{
cat("\n",w, names(complete.numeric.data)[w])
commandAssign <- paste("df[",w,",",y,"]<- complete.numeric.data$", names(complete.numeric.data)[w],"[x]", sep = "")
}
} # else  # if (data.id != as.numeric(complete.numeric.data$.id[x]) && y !=0)
#new.data.to.work$LDL[record.number] <- as.numeric(Mode(df))
} # for (x in 1:nrow(complete.numeric.data))
remove.packages("bnpa", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
?pf
?mice
?pf
?complete
??complete
?borderProperties
??borderProperties
??%>%
??docx
??Flextable
??cellProperties
??setFlexTableBorders
??ABLINE
?ABLINE
?abline
?grid
?title
df.numeric.variable <- paste("subset(data.to.work, select=c('", variable.name, sep = "")
df.numeric.variable
df.numeric.variable <- paste("subset(data.to.work, select=c('ID','", variable.name, sep = "")
df.numeric.variable
df.numeric.variable <- ""
df.factor.variable <- ""
df.dichotomic.variable <- ""
for (variable.name in names(data.to.work))
{
# Verify the type of variable
type.variable <- bnpa::check.type.one.var(data.to.work, show.message=0, variable.name)
##### integer & numeric #####
if (type.variable == 1 || type.variable == 2) ##### integer & numeric
{
if (df.numeric.variable == "")
{
df.numeric.variable <- paste("subset(data.to.work, select=c('ID','", variable.name, sep = "")
} else
{
df.numeric.variable <- paste(df.numeric.variable, "','", variable.name, sep = "")
} # if (variable.to.numeric.ds = "")
##### factor#####
} else if (type.variable == 3) # if (type.variable == 1 || type.variable == 2)
{
# calculate the number o levels
number.of.levels <- eval(parse(text=paste("nlevels(data.to.work$", variable.name,")", sep = "")))
##### factor with 2 levels = dichotomous #####
if (number.of.levels == 2)
{
if (df.dichotomic.variable == "")
{
df.dichotomic.variable <- paste("subset(data.to.work, select=c('ID','",variable.name, sep = "")
} else # if (df.dichotomic.variable == "")
{
df.dichotomic.variable <- paste(df.dichotomic.variable, "','", variable.name, sep = "")
} # else # if (df.factor.variable == "")
} else
{
##### factor with more then 2 levels #####
if (df.factor.variable == "")
{
df.factor.variable <- paste("subset(data.to.work, select=c('ID','", variable.name, sep = "")
} else # if (df.dichotomic.variable == "")
{
df.factor.variable <- paste(df.factor.variable, "','", variable.name, sep = "")
} # else # if (df.factor.variable == "")
} # if (number.of.levels == 2)
} # else if (type.variable == 3)
} # for (variable.name in names(data.to.work))
df.numeric.variable <- paste(df.numeric.variable, "'))", sep = "")
df.factor.variable <- paste(df.factor.variable, "'))", sep = "")
df.dichotomic.variable <- paste(df.dichotomic.variable, "'))", sep = "")
df.numeric.variable
remove.packages("bnpa", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
remove.packages("ReporteRs", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("ReporteRs")
remove.packages("ReporteRsjars", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("ReporteRs")
install.packages("ReporteRsjars")
closeAllConnections()
rm(list=ls())
# Set enviroment
setwd("~/Documentos/R-Packages/scripts and data to test functions/geraBNPA")
# Load packages
library(bnpa)
# Show data sets
data1<-dataQuantC # Pre-Loaded
data2<-dataQualiN # Pre-Loaded
head(data1)
head(data2)
# Set a data set to work
data.to.work <- data1
# Creates a white and black list empty
wl=""
bl=""
# Set what BN learning algorithms will be used
bn.learn.algorithms <- c("hc", "rsmax2")
bn.learn.algorithms <- c("hc")
nreplicates = 10
check.algorithms <-(bn.learn.algorithms)
# Check if needed packages are installed
cat ("\nCheck if all packages needed are installed... If not will install.")
bnpa::check.package.files()
# check if the dataset has NAs
cat ("\nCheck if the dataset has NAs...")
total.na <- check.na(data.to.work)
if (total.na > 0)
{
cat ("\nYour dataset has",total.na," NA(s). The bnpa package does not allow it. Fix this problem, please.")
return()
}
# check what type of variables the dataset has: 1=integer, 2=numeric, 3=factor,
# 4=integer and numeric, 5=integer and  factor, 6=numeric and factor,
# 7=integer, numeric and factor
type.variable <- bnpa::check.types(data.to.work)
if (type.variable != 2)
{
if (type.variable == 1)
{
type.data <- ("integer")
} else if  (type.variable == 3)
{
type.data <- ("factor")
} else if (type.variable == 4)
{
type.data <- ("integer and numeric")
} else if (type.variable == 5)
{
type.data <- ("integer and  factor")
} else  if (type.variable == 6)
{
type.data <- ("numeric and factor")
} else if (type.variable == 7)
{
type.data <- ("numeric and factor,")
}
} # if (type.variable != 2)
# Creates a direction variable to be used in the bn.boot.strap.strength.dir
bn.suitable.direction <- 0.50
w=1
if (type.variable == 2)
{
type.score <- c("loglik-g", "aic-g", "bic-g", "bge")
} #  if (type.variable == 2)
for (x in 1:length(type.score))
{
bn.boot.strap <- gera.bn.structure(data.to.work, bn.learn.algorithms[w], wl, bl, type.score[x], nreplicates)
# bn.boot.strap <- gera.bn.structure(data.to.work, bn.learn.algorithms[w], wl, bl, type.variable, nreplicates)
# select the best threshold for this dataset
bn.suitable.threshold <-attributes(bn.boot.strap)$threshold
# Select the best edges based on threshold and direction, normally 0.85 and 0.50
cat ("\nSelecting the best edges based on threshold and direction values...\n") ################### cat
bn.boot.strap.strength.dir <- bn.boot.strap[(bn.boot.strap$strength >= bn.suitable.threshold) &
(bn.boot.strap$direction > bn.suitable.direction), ]
# If bn.boot.strap.strength.dir result in a 0 row dataframe then give a message and return
if (nrow(bn.boot.strap.strength.dir) == 0)
{
cat("\nSorry, but the generated Bayesian Network is empty, check your data and try again, please.\n")
return()
}
# Over the best edges selected on the previous step, calculate the averaged BN
cat("\n")
utils::timestamp()
cat ("\nCalculating the averaged BN...\n")
bn.averaged <- bnlearn::averaged.network(bn.boot.strap.strength.dir)
cat("\nChecking compatibility of data and final Bayesian Network before generating Bayesian Network parameters...\n")
# Creates a matrix with names de data rows and 2 columns (column 1 = node,
#  col 2 = 1:exist in bn.boot.strap.strength.dir, 2: does not exist)
nodes.matrix <- matrix(, nrow = length(names(data.to.work)), ncol = 2)
# Load nodes.matrix with the names of nodes of data
for (x in 1:length(names(data.to.work)))
{
nodes.matrix[x,1] <- names(data.to.work)[x]
nodes.matrix[x,2] <- 0
}
# Check if nodes of data  are in bn.boot.strap.strength.dir, if not
# remove it from data before call gera.pa
for (x in 1:length(bn.boot.strap.strength.dir$from))
{
for (y in 1:nrow(nodes.matrix))
{
if (nodes.matrix[y,2] == 0 && (nodes.matrix[y,1] == bn.boot.strap.strength.dir$from[x]))
nodes.matrix[y,2] <- 1
} # for y(in 1:nrow(nodes.matrix))
} # for (x in 1:length(bn.boot.strap.strength.dir$from))
for (x in 1:length(bn.boot.strap.strength.dir$to))
{
for (y in 1:nrow(nodes.matrix))
{
if (nodes.matrix[y,2] == 0 &&
(nodes.matrix[y,1] == bn.boot.strap.strength.dir$to[x]))
nodes.matrix[y,2] <- 1
# Check if a node has no parents and no childrens
if (nodes.matrix[y,2] == 1 &&
((length(bnlearn::parents(bn.averaged, nodes.matrix[y,1])))  == 0 &&
(length(bnlearn::children(bn.averaged, nodes.matrix[y,1]))) == 0))
{
cat("\nYour Bayesian Network sructure has nodes without parents and childrens, remove from you dataset...\n\n") ################### cat
}
} # for y(in 1:nrow(nodes.matrix))
} # for (x in 1:length(bn.boot.strap.strength.dir$to))
# check what node remove and do it
for (x in 1:nrow(nodes.matrix))
{
if (nodes.matrix[x,2] == 0 )
{
cat("\nRemoving variable:", nodes.matrix[x,1], "...\n\n") ################### cat
commandAssign <- (paste("data.to.work$", nodes.matrix[x,1], " <- NULL", sep = ""))
eval(parse(text=commandAssign))
}
} # for y(in 1:nrow(nodes.matrix))
# Generating Bayesian Networks Parameters ################
cat("\n")
utils::timestamp()
cat ("\nGenerating Bayesian Networks parameters (using linear regression)...\n") ################### cat
param.name <- paste0("docbnparam", bn.learn.algorithms[w], "Score_", type.score[x],".txt", sep = "")
bnhc.param <- ""
bnhc.param <- gera.bn.param(bn.averaged, data.to.work, param.name)
# Export a Bayesian Networks graph and do not show it on Plot Panel ################
cat("\n")
utils::timestamp()
cat ("\nExport a Bayesian Networks graph...\n")
graph.name <- paste0("imgBN", bn.learn.algorithms[w],"Score_", type.score[x], ".png", sep = "")
mount.graph(bn.averaged, bnhc.param,  graph.name, data.to.work)
# Creating Path Analysis model ################
cat("\n")
utils::timestamp()
cat ("\nCreating a Path Analysis model calculation...\n") ################### cat
pa.name <- paste0("docPAParam",bn.learn.algorithms[w], "Score_", type.score[x], " .txt", sep = "")
pa.imgname <- paste("imgPA",bn.learn.algorithms[w],".png", sep = "")
pa.param <- ""
pa.param <- gera.pa(bn.averaged, data.to.work, pa.name, pa.imgname)
} # for (x in 1:length(type.score))
##------ Mon Jul 10 22:48:46 2017 ------##
##------ Mon Jul 10 22:48:47 2017 ------##
##------ Mon Jul 10 22:48:47 2017 ------##
##------ Mon Jul 10 22:48:47 2017 ------##
x
x=1
type.score
length(type.score)
for (tscore in 1:length(type.score))
{
bn.boot.strap <- gera.bn.structure(data.to.work, bn.learn.algorithms[w], wl, bl, type.score[tscore], nreplicates)
# bn.boot.strap <- gera.bn.structure(data.to.work, bn.learn.algorithms[w], wl, bl, type.variable, nreplicates)
# select the best threshold for this dataset
bn.suitable.threshold <-attributes(bn.boot.strap)$threshold
# Select the best edges based on threshold and direction, normally 0.85 and 0.50
cat ("\nSelecting the best edges based on threshold and direction values...\n") ################### cat
bn.boot.strap.strength.dir <- bn.boot.strap[(bn.boot.strap$strength >= bn.suitable.threshold) &
(bn.boot.strap$direction > bn.suitable.direction), ]
# If bn.boot.strap.strength.dir result in a 0 row dataframe then give a message and return
if (nrow(bn.boot.strap.strength.dir) == 0)
{
cat("\nSorry, but the generated Bayesian Network is empty, check your data and try again, please.\n")
return()
}
# Over the best edges selected on the previous step, calculate the averaged BN
cat("\n")
utils::timestamp()
cat ("\nCalculating the averaged BN...\n")
bn.averaged <- bnlearn::averaged.network(bn.boot.strap.strength.dir)
cat("\nChecking compatibility of data and final Bayesian Network before generating Bayesian Network parameters...\n")
# Creates a matrix with names de data rows and 2 columns (column 1 = node,
#  col 2 = 1:exist in bn.boot.strap.strength.dir, 2: does not exist)
nodes.matrix <- matrix(, nrow = length(names(data.to.work)), ncol = 2)
# Load nodes.matrix with the names of nodes of data
for (x in 1:length(names(data.to.work)))
{
nodes.matrix[x,1] <- names(data.to.work)[x]
nodes.matrix[x,2] <- 0
}
# Check if nodes of data  are in bn.boot.strap.strength.dir, if not
# remove it from data before call gera.pa
for (x in 1:length(bn.boot.strap.strength.dir$from))
{
for (y in 1:nrow(nodes.matrix))
{
if (nodes.matrix[y,2] == 0 && (nodes.matrix[y,1] == bn.boot.strap.strength.dir$from[x]))
nodes.matrix[y,2] <- 1
} # for y(in 1:nrow(nodes.matrix))
} # for (x in 1:length(bn.boot.strap.strength.dir$from))
for (x in 1:length(bn.boot.strap.strength.dir$to))
{
for (y in 1:nrow(nodes.matrix))
{
if (nodes.matrix[y,2] == 0 &&
(nodes.matrix[y,1] == bn.boot.strap.strength.dir$to[x]))
nodes.matrix[y,2] <- 1
# Check if a node has no parents and no childrens
if (nodes.matrix[y,2] == 1 &&
((length(bnlearn::parents(bn.averaged, nodes.matrix[y,1])))  == 0 &&
(length(bnlearn::children(bn.averaged, nodes.matrix[y,1]))) == 0))
{
cat("\nYour Bayesian Network sructure has nodes without parents and childrens, remove from you dataset...\n\n") ################### cat
}
} # for y(in 1:nrow(nodes.matrix))
} # for (x in 1:length(bn.boot.strap.strength.dir$to))
# check what node remove and do it
for (x in 1:nrow(nodes.matrix))
{
if (nodes.matrix[x,2] == 0 )
{
cat("\nRemoving variable:", nodes.matrix[x,1], "...\n\n") ################### cat
commandAssign <- (paste("data.to.work$", nodes.matrix[x,1], " <- NULL", sep = ""))
eval(parse(text=commandAssign))
}
} # for y(in 1:nrow(nodes.matrix))
# Generating Bayesian Networks Parameters ################
cat("\n")
utils::timestamp()
cat ("\nGenerating Bayesian Networks parameters (using linear regression)...\n") ################### cat
param.name <- paste0("docbnparam", bn.learn.algorithms[w], "Score_", type.score[x],".txt", sep = "")
bnhc.param <- ""
bnhc.param <- gera.bn.param(bn.averaged, data.to.work, param.name)
# Export a Bayesian Networks graph and do not show it on Plot Panel ################
cat("\n")
utils::timestamp()
cat ("\nExport a Bayesian Networks graph...\n")
graph.name <- paste0("imgBN", bn.learn.algorithms[w],"Score_", type.score[x], ".png", sep = "")
mount.graph(bn.averaged, bnhc.param,  graph.name, data.to.work)
# Creating Path Analysis model ################
cat("\n")
utils::timestamp()
cat ("\nCreating a Path Analysis model calculation...\n") ################### cat
pa.name <- paste0("docPAParam",bn.learn.algorithms[w], "Score_", type.score[x], " .txt", sep = "")
pa.imgname <- paste("imgPA",bn.learn.algorithms[w],".png", sep = "")
pa.param <- ""
pa.param <- gera.pa(bn.averaged, data.to.work, pa.name, pa.imgname)
} # for (x in 1:length(type.score))
##------ Mon Jul 10 22:50:25 2017 ------##
##------ Mon Jul 10 22:50:25 2017 ------##
##------ Mon Jul 10 22:50:25 2017 ------##
##------ Mon Jul 10 22:50:25 2017 ------##
##------ Mon Jul 10 22:50:25 2017 ------##
##------ Mon Jul 10 22:50:26 2017 ------##
##------ Mon Jul 10 22:50:26 2017 ------##
##------ Mon Jul 10 22:50:26 2017 ------##
##------ Mon Jul 10 22:50:26 2017 ------##
##------ Mon Jul 10 22:50:27 2017 ------##
##------ Mon Jul 10 22:50:27 2017 ------##
##------ Mon Jul 10 22:50:27 2017 ------##
##------ Mon Jul 10 22:50:27 2017 ------##
##------ Mon Jul 10 22:50:27 2017 ------##
##------ Mon Jul 10 22:50:28 2017 ------##
##------ Mon Jul 10 22:50:28 2017 ------##
##------ Mon Jul 10 22:50:29 2017 ------##
##------ Mon Jul 10 22:50:29 2017 ------##
##------ Mon Jul 10 22:50:29 2017 ------##
##------ Mon Jul 10 22:50:29 2017 ------##
data_bn
