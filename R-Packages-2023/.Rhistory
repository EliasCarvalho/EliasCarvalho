white.list <- NULL
black.list <- "L-T"
cb.algorithms = c("gs")
sb.algorithms = c("hc")
cb.tests = "jt"
sb.tests = "aic"
optimized.option="FALSE"
outcome.var = "E"
build.pa = 0
gera.bn.structure(data.to.work, white.list, black.list, nreplicates, cb.algorithms,sb.algorithms,
cb.tests, sb.tests, optimized.option, outcome.var, build.pa)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQualiN
dummy.vars <- c("A", "B")
data.to.work <- bnpa::create.dummies(data.to.work, dummy.vars)
# Clean environment
closeAllConnections()
rm(list=ls())
# Set enviroment
# setwd("to your working directory")
# Load packages
library(bnpa)
# Use working data sets from package
data.to.work <- dataQualiN
# Set possible dummy variables
dummy.vars <- c("A", "B")
# Show the structure before
str(data.to.work)
data.to.work <- bnpa::create.dummies(data.to.work, dummy.vars)
str(data.to.work)
closeAllConnections()
rm(list=ls())
# Set enviroment
# setwd("to your working directory")
# Load packages
library(bnpa)
# Use working data sets from package
data.to.work <- dataQualiN
# Start the cluster
cl <- bnpa::create.cluster()
R=1000
algorithm="hc"
data.bn.boot.strap=boot.strength(data=data.to.work,R,algorithm,cluster=cl,
algorithm.args=list(score="bic"),cpdag = FALSE)
data.bn.boot.strap=bnlearn::boot.strength(data=data.to.work,R,algorithm,cluster=cl,
algorithm.args=list(score="bic"),cpdag = FALSE)
R
algorithm
data.bn.boot.strap=bnlearn::boot.strength(data=data.to.work, R, algorithm, cluster=cl, algorithm.args=list(score="bic"), cpdag = FALSE)
bnlearn::boot.strength(data=data.to.work, R, algorithm, cluster=cl, algorithm.args=list(score="bic"), cpdag = FALSE)
??bnlearn::boot.strength
data.to.work <- dataQualiN
cl <- bnpa::create.cluster()
nreplicates=1000
bn.algorithm="hc"
data.bn.boot.strap=bnlearn::boot.strength(data = data.to.work, R = nreplicates, algorithm = bn.algorithm, cluster=cl, algorithm.args=list(score="bic"), cpdag = FALSE)
parallel::stopCluster(cl)
head(data.bn.boot.strap)
closeAllConnections()
rm(list=ls())
library(bnpa)
confusion.matrix <-matrix(c(12395, 4, 377, 1), nrow=2, ncol=2, byrow=TRUE)
cm.position <- c(4,3,2,1)
confusion.matrix
confusion.matrix <- convert.confusion.matrix(confusion.matrix, cm.position)
confusion.matrix
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQualiN
head(data.to.work)
data.to.work$test.variable[data.to.work$A == "yes"] <- "low"
data.to.work$test.variable[data.to.work$B == "yes"] <- "medium"
data.to.work$test.variable[data.to.work$X == "yes"] <- "high"
data.to.work$test.variable <- as.factor(data.to.work$test.variable)
bnpa::check.variables.to.be.ordered(data.to.work)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQualiN
head(data.to.work)
data.to.work$test.variable[data.to.work$A == "yes"] <- "low"
data.to.work$test.variable[data.to.work$B == "yes"] <- "medium"
data.to.work$test.variable[data.to.work$X == "yes"] <- "high"
data.to.work$test.variable <- as.factor(data.to.work$test.variable)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQuantC
head(data.to.work)
show.message <- 1
bnpa::check.types(data.to.work, show.message)
data.to.work$Z <- round(runif(500, min=0, max=1000),2)
data.to.work$Z <- factor(data.to.work$Z)
show.message <- 1
bnpa::check.types(data.to.work, show.message)
show.message <- 0
bnpa::check.types(data.to.work, show.message)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQuantC
head(data.to.work)
data.to.work$Z <- round(runif(500, min=0, max=1000),2)
data.to.work$Z <- factor(data.to.work$Z)
variable.name = "A"
check.type.one.var(data.to.work, show.message=0, variable.name)
variable.name = "Z"
check.type.one.var(data.to.work, show.message=0, variable.name)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQuantC # Pre-Loaded
ask.before = "Y" # or ask.before = "N"
dataQuantC <- check.outliers(data.to.work, ask.before)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQualiN # Pre-Loaded
bn.structure<-bnlearn::hc(data.to.work)
bnlearn::graphviz.plot(bn.structure)
data.to.work$A <- as.ordered(data.to.work$A)
data.to.work$B <- as.ordered(data.to.work$B)
cat.var.to.use.in.pa <- bnpa::check.ordered.to.pa(bn.structure, data.to.work)
cat.var.to.use.in.pa
closeAllConnections()
rm(list=ls())
library(bnpa)
v1 <- factor(c("a", "a", "b", "a", "b", "a", "b", "b"))
v2 <- ordered(c("c", "b", "b", "c", "a", "d", "a", "b"))
data.to.work <- data.frame(v1,n1=1:8,v2)
var.name = "v1"
check.ordered.one.var(data.to.work, var.name)
var.name = "v2"
check.ordered.one.var(data.to.work, var.name)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQuantC
head(data.to.work)
data.to.work <- as.data.frame(lapply(data.to.work, function(cc) cc[ sample(c(TRUE, NA),
prob = c(0.85, 0.15), size = length(cc), replace = TRUE) ]))
check.na(data.to.work)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQualiN
head(data.to.work)
data.to.work$Z <- round(runif(500, min=0, max=1000),2)
data.to.work$Z <- factor(data.to.work$Z)
variable.name = "Z"
number.of.levels <- check.levels.one.variable(data.to.work, variable.name)
number.of.levels
variable.name = "A"
number.of.levels <- check.levels.one.variable(data.to.work, variable.name)
number.of.levels
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQuantC
head(data.to.work)
str(data.to.work)
variable.name = "A"
check.dichotomic.one.var(data.to.work, variable.name)
data.to.work$Z <- round(runif(500, min=0, max=1),0)
str(data.to.work)
variable.name = "Z"
check.dichotomic.one.var(data.to.work, variable.name)
closeAllConnections()
rm(list=ls())
library(bnpa)
bn.learn.algorithms <- c("gs", "hc")
check.algorithms(bn.learn.algorithms)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQualiN
cl <- bnpa::create.cluster()
nreplicates=1000
bn.algorithm="hc"
data.bn.boot.strap=bnlearn::boot.strength(data = data.to.work, R = nreplicates, algorithm = bn.algorithm, cluster=cl, algorithm.args=list(score="bic"), cpdag = FALSE)
parallel::stopCluster(cl)
head(data.bn.boot.strap)
data("dataQualiN")
data("dataQualiC")
data("dataQuantiC")
data("dataQualiN")
data("dataQuantC")
??list_data_in_pkg
library(bnpa)
library(bnpa)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQuantC)
bn.algorithm<-"hc"
bn.score.test<-"aic-g"
black.list<-NULL
white.list<-NULL
nreplicates=10
type.of.algorithm<-"score-based"
outcome.var<-"D"
bn.structure <- bnpa::boot.strap.bn(bn.algorithm, bn.score.test, dataQuantC, black.list, white.list, nreplicates, type.of.algorithm, outcome.var)
bnlearn::graphviz.plot(bn.structure)
closeAllConnections()
rm(list=ls())
library(bnpa)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN)
cl <- bnpa::create.cluster()
nreplicates=1000
bn.algorithm="hc"
data.bn.boot.strap=bnlearn::boot.strength(data = dataQualiN, R = nreplicates, algorithm =
bn.algorithm, cluster=cl, algorithm.args=list(score="bic"), cpdag = FALSE)
parallel::stopCluster(cl)
head(data.bn.boot.strap)
closeAllConnections()
rm(list=ls())
library(bnpa)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQuantC)
head(dataQuantC)
str(dataQuantC)
variable.name = "A"
check.dichotomic.one.var(dataQuantC, variable.name)
dataQuantC$Z <- round(runif(500, min=0, max=1),0)
str(dataQuantC)
variable.name = "Z"
check.dichotomic.one.var(dataQuantC, variable.name)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN)
head(dataQualiN)
dataQualiN$Z <- round(runif(500, min=0, max=1000),2)
dataQualiN$Z <- factor(dataQualiN$Z)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN)
head(dataQualiN)
dataQualiN$Z <- round(runif(500, min=0, max=1000),2)
dataQualiN$Z <- factor(dataQualiN$Z)
variable.name = "Z"
number.of.levels <- check.levels.one.variable(dataQualiN, variable.name)
number.of.levels
variable.name = "A"
number.of.levels <- check.levels.one.variable(dataQualiN, variable.name)
number.of.levels
closeAllConnections()
rm(list=ls())
library(bnpa)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQuantC)
head(dataQuantC)
dataQuantC <- as.data.frame(lapply(dataQuantC, function(cc) cc[ sample(c(TRUE, NA),
prob = c(0.85, 0.15), size = length(cc), replace = TRUE) ]))
check.na(dataQuantC)
check.na(dataQuantC)
closeAllConnections()
rm(list=ls())
data(dataQualiN)
head(dataQualiN)
dataQualiN$Z <- round(runif(500, min=0, max=1000),2)
dataQualiN$Z <- factor(dataQualiN$Z)
variable.name = "Z"
number.of.levels <- check.levels.one.variable(dataQualiN, variable.name)
number.of.levels
variable.name = "A"
number.of.levels <- check.levels.one.variable(dataQualiN, variable.name)
number.of.levels
closeAllConnections()
rm(list=ls())
setwd("~/your working directory")
library(bnpa)
v1 <- factor(c("a", "a", "b", "a", "b", "a", "b", "b"))
v2 <- ordered(c("c", "b", "b", "c", "a", "d", "a", "b"))
data.to.work <- data.frame(v1,n1=1:8,v2)
var.name = "v1"
check.ordered.one.var(data.to.work, var.name)
var.name = "v2"
check.ordered.one.var(data.to.work, var.name)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN)
head(dataQualiN)
dataQualiN$A <- ordered(dataQualiN$A)
var.name <- "A"
check.ordered.one.var(data.to.work, var.name)
check.ordered.one.var(dataQualiN, var.name)
var.name <- "B"
check.ordered.one.var(dataQualiN, var.name)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQualiN # Pre-Loaded
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN) # Pre-Loaded
bn.structure<-bnlearn::hc(dataQualiN)
bnlearn::graphviz.plot(bn.structure)
dataQualiN$A <- as.ordered(dataQualiN$A)
dataQualiN$B <- as.ordered(dataQualiN$B)
cat.var.to.use.in.pa <- bnpa::check.ordered.to.pa(bn.structure, dataQualiN)
cat.var.to.use.in.pa
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQuantC) # Pre-Loaded
ask.before = "Y" # or ask.before = "N"
dataQuantC <- check.outliers(dataQuantC, ask.before)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQuantC)
head(dataQuantC)
dataQuantC$Z <- round(runif(500, min=0, max=1000),2)
dataQuantC$Z <- factor(dataQuantC$Z)
variable.name = "A"
check.type.one.var(dataQuantC, show.message=0, variable.name)
check.type.one.var(dataQuantC, show.message=1, variable.name)
variable.name = "Z"
check.type.one.var(dataQuantC, show.message=0, variable.name)
show.message=1
check.type.one.var(dataQuantC, show.message, variable.name)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQuantC)
head(dataQuantC)
show.message <- 1
bnpa::check.types(dataQuantC, show.message)
dataQuantC$Z <- round(runif(500, min=0, max=1000),2)
dataQuantC$Z <- factor(dataQuantC$Z)
show.message <- 1
bnpa::check.types(dataQuantC, show.message)
show.message <- 0
bnpa::check.types(dataQuantC, show.message)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- dataQualiN
head(data.to.work)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN)
head(dataQualiN)
dataQualiN$test.variable[dataQualiN$A == "yes"] <- "low"
dataQualiN$test.variable[dataQualiN$B == "yes"] <- "medium"
dataQualiN$test.variable[dataQualiN$X == "yes"] <- "high"
dataQualiN$test.variable <- as.factor(dataQualiN$test.variable)
bnpa::check.variables.to.be.ordered(dataQualiN)
closeAllConnections()
rm(list=ls())
# Set enviroment
setwd("~/Documentos/R-Packages/scripts and data to test functions")
# Load the "bnpa" package
library(bnpa)
# Use working datasets from package
data(dataQualiN)
# start the cluster
cl <- bnpa::create.cluster()
# Executes a parallel bootstrap process
data.bn.boot.strap = bnlearn::boot.strength(data = dataQualiN, R = 1000, algorithm = "hc", cluster = cl, algorithm.args = list(score = "bic"), cpdag = FALSE)
# Release the cluster
parallel::stopCluster(cl)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN)
str(dataQualiN)
dummy.vars <- c("A", "B")
dataQualiN <- bnpa::create.dummies(dataQualiN, dummy.vars)
str(dataQualiN)
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work <- bnpa::dataQualiN # Pre-Loaded
data(dataQualiN)
closeAllConnections()
rm(list=ls())
# Set environment
# setwd("To your working directory")
# Load packages
library(bnpa)
# Load Data
data(dataQualiN)
data(dataQualiN)
nreplicates = 1000
white.list <- NULL
black.list <- "L-T"
cb.algorithms = c("gs")
sb.algorithms = c("hc")
cb.tests = "jt"
sb.tests = "aic"
optimized.option="FALSE"
outcome.var = "E"
build.pa = 0
gera.bn.structure(dataQualiN, white.list, black.list, nreplicates, cb.algorithms,sb.algorithms,
cb.tests, sb.tests, optimized.option, outcome.var, build.pa)
closeAllConnections()
rm(list=ls())
library(bnpa)
library(bnlearn)
closeAllConnections()
rm(list=ls())
library(bnpa)
library(bnlearn)
data(dataQualiN)
head(dataQualiN)
bn.structure <- hc(dataQualiN)
bnlearn::graphviz.plot(bn.structure)
pa.model <- gera.pa.model(bn.structure, dataQualiN)
pa.model
closeAllConnections()
rm(list=ls())
library(bnpa)
data.to.work<-dataQualiN # Pre-Loaded
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN)
head(dataQualiN)
bn.structure <- bnlearn::hc(dataQualiN)
bnlearn::graphviz.plot(bn.structure)
pa.name<-"docPAHC"
pa.imgname<-"imgPAHC"
bn.algorithm<-"hc"
bn.score.test<-"aic-g"
outcome.var<-"D"
gera.pa(bn.structure, dataQualiN, pa.name, pa.imgname, bn.algorithm, bn.score.test, outcome.var)
closeAllConnections()
rm(list=ls())
library(bnpa)
library(bnlearn)
data.to.work <-dataQuantC
closeAllConnections()
rm(list=ls())
library(bnpa)
library(bnlearn)
data(dataQuantC)
head(dataQuantC)
bn.structure <- hc(dataQuantC)
par(mfrow=c(1,2))
bnlearn::graphviz.plot(bn.structure)
black.list <- ("A-C,D-F")
black.list <- mount.wl.bl.list(black.list)
black.list
white.list <- ("A-B,D-G")
white.list <- mount.wl.bl.list(white.list)
white.list
bn.structure <- hc(dataQuantC, whitelist = white.list, blacklist = black.list)
bnlearn::graphviz.plot(bn.structure)
closeAllConnections()
rm(list=ls())
library(bnpa)
library(bnlearn)
closeAllConnections()
rm(list=ls())
library(bnpa)
library(bnlearn)
data(dataQuantC)
head(dataQuantC)
black.list <- ""
type.var <- "o"
var.name <- "A"
black.list <- outcome.predictor.var(dataQuantC, var.name, type.var, black.list)
black.list
type.var <- "p"
var.name <- "D"
black.list <- outcome.predictor.var(dataQuantC, var.name, type.var, black.list)
black.list
closeAllConnections()
rm(list=ls())
library(bnpa)
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQuantC)
variable.content <- dataQuantC$A
variable.name <- "A"
preprocess.information <- preprocess.outliers(dataQuantC, variable.content, variable.name)
num.outliers <- preprocess.information[[1]]
variable.content <- preprocess.information[[2]]
mean.of.outliers <- preprocess.information[[3]]
closeAllConnections()
rm(list=ls())
library(bnpa)
data(dataQualiN)
dataQualiN <- bnpa::transf.into.ordinal(dataQualiN)
str(dataQualiN)
library(bnpa)
library(bnpa)
library(bnpa)
data("dataQuantC")
str(dataQuantC)
View(dataQuantC)
View(dataQuantC)
library(bnpa)
library(bnpa)
library(bnpa)
