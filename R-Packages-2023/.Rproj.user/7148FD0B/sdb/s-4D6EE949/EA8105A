{
    "collab_server" : "",
    "contents" : "#'Executes a bootstrap during the learning of a BN structure\n#'\n#'This function receives a list of parameters, executes the bootstrap process and learn the Bayesian Network (BN) from the data set, then executes the process of model averaging to extract the final BN structure and print it.\n#'@param bn.algorithm is a list of algorithms to learn the BN structure.\n#'@param bn.score.test is list of conditional independence tests and the network scores to be used.\n#'@param data.to.work is a data from which the BN structure will be learned.\n#'@param black.list is a list of forbiden connections of BN structure to be created.\n#'@param white.list  is a list of mandatory connections of BN structure to be created.\n#'@param nreplicates is the number of replications to be done in the bootstrap process.\n#'@param type.of.algorithm is the type of algorithm to learn the BN sctructure, it would be constrained or score based.\n#'@param outcome.var is the variable to be used as outcome (dependent) and be highlighted in the BN.\n#'@return The final BN structure learned.\n#'@author Elias Carvalho\n#'@references Claeskens N, Hjort N (2009) Model selection and model avaraging. Cambridge University Press, Cambridge, England.\n#'@references Koller D, Friedman N (2009) Probabilistic graphical models: principles and techniques. MIT Press, Cambridge.\n#'@references Scutari M (2017). Bayesian Network Constraint-Based Structure Learning Algorithms: Parallel and Optimized Implementations in the bnlearn R Package. Journal of Statistical Software, 77(2), 1-20.\n#'@examples\n#'\\dontrun{\n#'# Clean environment\n#'closeAllConnections()\n#'rm(list=ls())\n#'# Set enviroment\n#'# setwd(\"to your working directory\")\n#'# Load packages\n#'library(bnpa)\n#'# Use working data sets from package\n#'data.to.work <- dataQualiN\n#'# Start the cluster\n#'cl <- bnpa::create.cluster()\n#'# Set the number of replications\n#'nreplicates=1000\n#'# Set the algorithm to be used\n#'bn.algorithm=\"hc\"\n#'# Executes a parallel bootstrap process\n#'data.bn.boot.strap=bnlearn::boot.strength(data = data.to.work, R = nreplicates, algorithm =\n#'bn.algorithm, cluster=cl, algorithm.args=list(score=\"bic\"), cpdag = FALSE)\n#'# Release the cluster\n#'parallel::stopCluster(cl)\n#'head(data.bn.boot.strap)\n#'}\n#'@export\n\nboot.strap.bn <-function(bn.algorithm, bn.score.test, data.to.work, black.list, white.list, nreplicates = 1000, type.of.algorithm, outcome.var)\n{\n  # Set the BN param and image name\n  bn.param.name <- paste(\"docBN_Param_\", bn.algorithm, \"_\", bn.score.test, \"_\", nrow(data.to.work), \".txt\", sep = \"\")\n  bn.imgname <- paste(\"imgBN_\", bn.algorithm, \"_\", bn.score.test, \"_\", nrow(data.to.work), \".png\", sep = \"\")\n  data.bn.boot.strap <- \"\"\n  if (type.of.algorithm==\"constrained-based\")\n  {\n    commandAssign <- paste(\"data.bn.boot.strap = bnlearn::boot.strength(data = data.to.work, R = nreplicates, algorithm = bn.algorithm, cluster = cl, algorithm.args = list(test = bn.score.test, whitelist=white.list, blacklist = black.list), cpdag = FALSE)\")\n  } else if (type.of.algorithm==\"score-based\") #  if (type.of.algorithm==\"constrained-based\")\n  {\n    commandAssign <- paste(\"data.bn.boot.strap = bnlearn::boot.strength(data = data.to.work, R = nreplicates, algorithm = bn.algorithm,cluster = cl, algorithm.args = list(score = bn.score.test, whitelist=white.list, blacklist = black.list), cpdag = FALSE)\")\n  } # else if (type.of.algorithm==\"score-based\") #  if (type.of.algorithm==\"constrained-based\")\n\n  # Creates a cluster based on sockets to execute bootstraping in parallel using number of processor cores -1\n  cl <- bnpa::create.cluster()\n\n  # Start bootstrap\n  cat (paste(\"\\n\\n==== Bootstraping with algorithm '\", bn.algorithm, \"' and '\", bn.score.test, \"' replications: \", nreplicates,\"...\", sep = \"\"))\n\n  eval(parse(text=commandAssign))\n\n  # Release the cluster\n  parallel::stopCluster(cl);\n\n  # If the BN is not empty print BN param and graph\n  if (!is.na((data.bn.boot.strap$from[1])))\n  {\n    # Averaging the BN selecting the best arcs with the arc strength greather equal\n    # attributes(data.bn.boot.strap)$threshold and direction >= 0.5\n    bn.structure <- bnlearn::averaged.network(data.bn.boot.strap)\n\n    # If there area directed arcs\n    outcome.parents<-\"\"\n    parents.of.outcome<-0\n    # If there are directed arcs\n    if (length(bnlearn::directed.arcs(bn.structure))>0)\n    {\n      # Calculates how much parents outcome.var has\n      commandAssign <- paste(\"parents.of.outcome <- length(bnlearn::parents(bn.structure, '\", outcome.var, \"'))\", sep = \"\")\n      eval(parse(text=commandAssign))\n      # If has parents\n      if (parents.of.outcome > 0)\n      {\n        # Find the parents of the outcome variable\n        commandAssign <- paste(\"outcome.parents <- bnlearn::parents(bn.structure,'\", outcome.var, \"')\", sep = \"\")\n        eval(parse(text=commandAssign))\n        # Set a working var to store highligh vars\n        outcome.highlights <- \"\"\n        # Scan the parents and fill  the matrix\n        for (x in 1: length(outcome.parents))\n        {\n          # In the first time create a matrix\n          if (x==1)\n          {\n            # Create a matrix to store variables to highlight\n            commandAssign <- paste(\"outcome.highlights <- matrix(c(\",  sep = \"\")\n          } # if (x==1)\n          # If is not the last element\n          if (x !=length(outcome.parents))\n          {\n            # mount the commmand joining parents of outcome\n            commandAssign <- paste(commandAssign,\"'\", outcome.parents[x],\"','\", outcome.var,\"',\", sep = \"\")\n          } else # if (x !=length(outcome.parents)) # Is the last element\n          {\n            commandAssign <- paste(commandAssign,\"'\", outcome.parents[x],\"','\", outcome.var,\"')\", sep = \"\")\n          } # else # if (x !=length(outcome.parents))\n        } #  for (x in 1: length(outcome.parents))\n        # Creates a matrix with 'from' and 'to' highlight the outcome\n        commandAssign <- paste(commandAssign, \", ncol = 2, byrow = TRUE, dimnames = list(NULL, c('from', 'to')))\", sep = \"\")\n        eval(parse(text=commandAssign))\n\n        # If nas no parents\n        if (length(outcome.parents) == 0)\n        {\n          # Set name and type of image\n          grDevices::png(filename=bn.imgname, units=\"in\", width=7, height=7, pointsize=6, res=150)\n          # Plot a BN structure learned without highlights\n          bnlearn::strength.plot(bn.structure, data.bn.boot.strap, shape = \"ellipse\")\n          # Turn off device and save into disk\n          grDevices::dev.off()\n        } else # if (length(outcome.parents) == 0)\n        {\n          # Set name and type of image\n          grDevices::png(filename=bn.imgname, units=\"in\", width=7, height=7, pointsize=6, res=150)\n          # Plot a BN structure learned\n          bnlearn::strength.plot(bn.structure, data.bn.boot.strap, shape = \"ellipse\",\n                                highlight = list(arcs = outcome.highlights))\n          # Turn off device and save into disk\n          grDevices::dev.off()\n        } # else # if (length(outcome.parents) == 0)\n      } else # if (parents.of.outcome > 0)\n      {\n        # Set name and type of image\n        grDevices::png(filename=bn.imgname, units=\"in\", width=7, height=7, pointsize=6, res=150)\n        # Plot a BN structure learned\n        bnlearn::strength.plot(bn.structure, data.bn.boot.strap, shape = \"ellipse\")\n        # Turn off device and save into disk\n        grDevices::dev.off()\n      } # else # if (parents.of.outcome > 0)\n    } else # if (length(bnlearn::directed.arcs(bn.structure))>0)\n    {\n      # Set BN structure as NULL\n      bn.structure <- NULL\n    } # else # if (length(bnlearn::directed.arcs(bn.structure))>0)\n  } else #  if (!is.na((data.bn.boot.strap$from[1]))) # The BN structure is empty\n  {\n    # Set BN structure as NULL\n    bn.structure <- NULL\n  } # else #  if (!is.na((data.bn.boot.strap$from[1])))\n  # Return the BN structure\n  return(bn.structure)\n} # boot.strap.bn <-function\n",
    "created" : 1563814902942.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "100577526",
    "id" : "EA8105A",
    "lastKnownWriteTime" : 1563814921,
    "last_content_update" : 1563814921873,
    "path" : "~/Documents/00.2019/88.R-Packages/bnpa/R/boot.strap.bn.R",
    "project_path" : "R/boot.strap.bn.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}