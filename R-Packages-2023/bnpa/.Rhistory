data.to.work.train$SMK<-relevel(data.to.work.train$SMK,"No Smoker")
levels(data.to.work.train$ALC)<-c("Alcoholic","Alcoholic","No Alcoholic")
data.to.work.train$ALC<-relevel(data.to.work.train$ALC,"No Alcoholic")
levels(data.to.work.train$BMI)<-c("Normal","Obese", "Overweight")
data.to.work.train$BMI<-relevel(data.to.work.train$BMI,"Normal")
levels(data.to.work.train$WRK)<-c("Work","No Work")
data.to.work.train$WRK<-relevel(data.to.work.train$WRK,"No Work")
levels(data.to.work.train$STK)<-c("Stroke","No Stroke")
data.to.work.train$STK<-relevel(data.to.work.train$STK,"No Stroke")
levels(data.to.work.train$RUN)<-c("Run","No Run")
data.to.work.train$RUN<-relevel(data.to.work.train$RUN,"No Run")
levels(data.to.work.train$WLK)<-c("Walk","No Walk")
data.to.work.train$WLK<-relevel(data.to.work.train$WLK,"No Walk")
levels(data.to.work.train$BYC)<-c("Bike","No Bike")
data.to.work.train$BYC<-relevel(data.to.work.train$BYC,"No Bike")
levels(data.to.work.train$INC)<-c("<20k","20k-39k","40k-59k","60k-79k","80k+")
data.to.work.train$INC<-relevel(data.to.work.train$INC,"<20k")
levels(data.to.work.train$HHD)<-c("Heart Disease","No Heart Disease")
data.to.work.train$HHD<-relevel(data.to.work.train$HHD,"No Heart Disease")
# Transform variables with more than 2 factor in ordered
data.to.work.train$BMI <- as.ordered(data.to.work.train$BMI)
data.to.work.train$INC <- as.ordered(data.to.work.train$INC)
# Print a summary of variables
summary(data.to.work.train)
# Set a bnlearn parameter
optimized.option="FALSE"
# Checking the Nas
bnpa::check.na(data.to.work.train)
# Set constrained-based algorithms to learn the structure BN
cb.algorithms = c("gs","iamb", "fast.iamb", "inter.iamb")
# Set score-based algorithms to learn the structure BN
sb.algorithms = c("hc","tabu")
# Create a black and white list (empty in the first momment)
white.list=""
black.list <- ""
# Set the outcome var(s)
type.var <- "o" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "HHD" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
# Set the predictor var(s)
type.var <- "P" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "AGE" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
type.var <- "P" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "SEX" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
# Start generation of BN and PA models
outcome.var = "HHD"
build.pa = 1
for(i in seq(from=100, to=200, by=100))
{
#  stuff, such as
cat("\nBuilding BNPA with replicates =",i)
nreplicates = i
commandAssign <- paste("setwd('~/Documentos/03.2020/00.Doutorado - Experimento - Final/04. BNPA/",i,"')", sep = "")
eval(parse(text=commandAssign))
# Learn the BN Structure and Build the PA Model and it fit indexes
gera.bn.pa(data.to.work.train, white.list, black.list, nreplicates,
cb.algorithms, sb.algorithms, outcome.var, build.pa)
}
# scriptBNPA.R
# Author: Elias Carvalho
# Period: 07/2019
# Clean environment
closeAllConnections()
rm(list=ls())
# Set Work Dir
setwd("~/Documentos/01.2020/00.Doutorado - Experimento - Final/04. BNPA")
# Load Packages
library("bnpa")
library("car") # recode
# Load training data
data.to.work.train <- read.csv("data.to.work.training.csv", sep = ',', header = TRUE,  colClasses=c('factor'))
data.to.work.train$X <- NULL
# Set base categories
levels(data.to.work.train$AGE)<-c("Adult","Elderly")
data.to.work.train$AGE<-relevel(data.to.work.train$AGE,"Adult")
levels(data.to.work.train$SEX)<-c("Male","Female")
data.to.work.train$SEX<-relevel(data.to.work.train$SEX,"Female")
levels(data.to.work.train$HBP)<-c("Has HBP","No HBP")
data.to.work.train$HBP<-relevel(data.to.work.train$HBP,"No HBP")
levels(data.to.work.train$DIA)<-c("Diabetic","No Diabetic")
data.to.work.train$DIA<-relevel(data.to.work.train$DIA,"No Diabetic")
levels(data.to.work.train$SMK)<-c("Smoker","Smoker","Smoker","Smoker","Smoker","No Smoker")
data.to.work.train$SMK<-relevel(data.to.work.train$SMK,"No Smoker")
levels(data.to.work.train$ALC)<-c("Alcoholic","Alcoholic","No Alcoholic")
data.to.work.train$ALC<-relevel(data.to.work.train$ALC,"No Alcoholic")
levels(data.to.work.train$BMI)<-c("Normal","Obese", "Overweight")
data.to.work.train$BMI<-relevel(data.to.work.train$BMI,"Normal")
levels(data.to.work.train$WRK)<-c("Work","No Work")
data.to.work.train$WRK<-relevel(data.to.work.train$WRK,"No Work")
levels(data.to.work.train$STK)<-c("Stroke","No Stroke")
data.to.work.train$STK<-relevel(data.to.work.train$STK,"No Stroke")
levels(data.to.work.train$RUN)<-c("Run","No Run")
data.to.work.train$RUN<-relevel(data.to.work.train$RUN,"No Run")
levels(data.to.work.train$WLK)<-c("Walk","No Walk")
data.to.work.train$WLK<-relevel(data.to.work.train$WLK,"No Walk")
levels(data.to.work.train$BYC)<-c("Bike","No Bike")
data.to.work.train$BYC<-relevel(data.to.work.train$BYC,"No Bike")
levels(data.to.work.train$INC)<-c("<20k","20k-39k","40k-59k","60k-79k","80k+")
data.to.work.train$INC<-relevel(data.to.work.train$INC,"<20k")
levels(data.to.work.train$HHD)<-c("Heart Disease","No Heart Disease")
data.to.work.train$HHD<-relevel(data.to.work.train$HHD,"No Heart Disease")
# Transform variables with more than 2 factor in ordered
data.to.work.train$BMI <- as.ordered(data.to.work.train$BMI)
data.to.work.train$INC <- as.ordered(data.to.work.train$INC)
# Print a summary of variables
summary(data.to.work.train)
# Set a bnlearn parameter
optimized.option="FALSE"
# Checking the Nas
bnpa::check.na(data.to.work.train)
# Set constrained-based algorithms to learn the structure BN
cb.algorithms = c("gs","iamb", "fast.iamb", "inter.iamb")
# Set score-based algorithms to learn the structure BN
sb.algorithms = c("hc","tabu")
# Create a black and white list (empty in the first momment)
white.list=""
black.list <- ""
# Set the outcome var(s)
type.var <- "o" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "HHD" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
# Set the predictor var(s)
type.var <- "P" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "AGE" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
type.var <- "P" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "SEX" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
# Start generation of BN and PA models
outcome.var = "HHD"
build.pa = 1
for(i in seq(from=100, to=200, by=100))
{
#  stuff, such as
cat("\nBuilding BNPA with replicates =",i)
nreplicates = i
commandAssign <- paste("setwd("~/Documentos/01.2020/00.Doutorado - Experimento - Final/04. BNPA")",i,"')", sep = "")
eval(parse(text=commandAssign))
# Learn the BN Structure and Build the PA Model and it fit indexes
gera.bn.pa(data.to.work.train, white.list, black.list, nreplicates,
cb.algorithms, sb.algorithms, outcome.var, build.pa)
}
nreplicates
# scriptBNPA.R
# Author: Elias Carvalho
# Period: 07/2019
# Clean environment
closeAllConnections()
rm(list=ls())
# Set Work Dir
setwd("~/Documentos/01.2020/00.Doutorado - Experimento - Final/04. BNPA")
# Load Packages
library("bnpa")
library("car") # recode
# Load training data
data.to.work.train <- read.csv("data.to.work.training.csv", sep = ',', header = TRUE,  colClasses=c('factor'))
data.to.work.train$X <- NULL
# Set base categories
levels(data.to.work.train$AGE)<-c("Adult","Elderly")
data.to.work.train$AGE<-relevel(data.to.work.train$AGE,"Adult")
levels(data.to.work.train$SEX)<-c("Male","Female")
data.to.work.train$SEX<-relevel(data.to.work.train$SEX,"Female")
levels(data.to.work.train$HBP)<-c("Has HBP","No HBP")
data.to.work.train$HBP<-relevel(data.to.work.train$HBP,"No HBP")
levels(data.to.work.train$DIA)<-c("Diabetic","No Diabetic")
data.to.work.train$DIA<-relevel(data.to.work.train$DIA,"No Diabetic")
levels(data.to.work.train$SMK)<-c("Smoker","Smoker","Smoker","Smoker","Smoker","No Smoker")
data.to.work.train$SMK<-relevel(data.to.work.train$SMK,"No Smoker")
levels(data.to.work.train$ALC)<-c("Alcoholic","Alcoholic","No Alcoholic")
data.to.work.train$ALC<-relevel(data.to.work.train$ALC,"No Alcoholic")
levels(data.to.work.train$BMI)<-c("Normal","Obese", "Overweight")
data.to.work.train$BMI<-relevel(data.to.work.train$BMI,"Normal")
levels(data.to.work.train$WRK)<-c("Work","No Work")
data.to.work.train$WRK<-relevel(data.to.work.train$WRK,"No Work")
levels(data.to.work.train$STK)<-c("Stroke","No Stroke")
data.to.work.train$STK<-relevel(data.to.work.train$STK,"No Stroke")
levels(data.to.work.train$RUN)<-c("Run","No Run")
data.to.work.train$RUN<-relevel(data.to.work.train$RUN,"No Run")
levels(data.to.work.train$WLK)<-c("Walk","No Walk")
data.to.work.train$WLK<-relevel(data.to.work.train$WLK,"No Walk")
levels(data.to.work.train$BYC)<-c("Bike","No Bike")
data.to.work.train$BYC<-relevel(data.to.work.train$BYC,"No Bike")
levels(data.to.work.train$INC)<-c("<20k","20k-39k","40k-59k","60k-79k","80k+")
data.to.work.train$INC<-relevel(data.to.work.train$INC,"<20k")
levels(data.to.work.train$HHD)<-c("Heart Disease","No Heart Disease")
data.to.work.train$HHD<-relevel(data.to.work.train$HHD,"No Heart Disease")
# Transform variables with more than 2 factor in ordered
data.to.work.train$BMI <- as.ordered(data.to.work.train$BMI)
data.to.work.train$INC <- as.ordered(data.to.work.train$INC)
# Print a summary of variables
summary(data.to.work.train)
# Set a bnlearn parameter
optimized.option="FALSE"
# Checking the Nas
bnpa::check.na(data.to.work.train)
# Set constrained-based algorithms to learn the structure BN
cb.algorithms = c("gs","iamb", "fast.iamb", "inter.iamb")
# Set score-based algorithms to learn the structure BN
sb.algorithms = c("hc","tabu")
# Create a black and white list (empty in the first momment)
white.list=""
black.list <- ""
# Set the outcome var(s)
type.var <- "o" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "HHD" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
# Set the predictor var(s)
type.var <- "P" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "AGE" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
type.var <- "P" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "SEX" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
# Start generation of BN and PA models
outcome.var = "HHD"
build.pa = 1
for(i in seq(from=100, to=200, by=100))
{
#  stuff, such as
cat("\nBuilding BNPA with replicates =",i)
nreplicates = i
commandAssign <- paste("setwd('~/Documentos/01.2020/00.Doutorado - Experimento - Final/04. BNPA/",i,"')", sep = "")
eval(parse(text=commandAssign))
# Learn the BN Structure and Build the PA Model and it fit indexes
gera.bn.pa(data.to.work.train, white.list, black.list, nreplicates,
cb.algorithms, sb.algorithms, outcome.var, build.pa)
}
##------ Thu Oct  1 16:51:07 2020 ------##
##------ Thu Oct  1 16:54:55 2020 ------##
##------ Thu Oct  1 16:57:35 2020 ------##
##------ Thu Oct  1 17:01:20 2020 ------##
##------ Thu Oct  1 17:02:39 2020 ------##
##------ Thu Oct  1 17:03:50 2020 ------##
##------ Thu Oct  1 17:05:00 2020 ------##
##------ Thu Oct  1 17:06:24 2020 ------##
##------ Thu Oct  1 17:07:42 2020 ------##
##------ Thu Oct  1 17:09:01 2020 ------##
##------ Thu Oct  1 17:15:08 2020 ------##
##------ Thu Oct  1 17:21:26 2020 ------##
##------ Thu Oct  1 17:25:55 2020 ------##
##------ Thu Oct  1 17:32:14 2020 ------##
##------ Thu Oct  1 17:33:42 2020 ------##
##------ Thu Oct  1 17:35:06 2020 ------##
##------ Thu Oct  1 17:36:30 2020 ------##
##------ Thu Oct  1 17:38:21 2020 ------##
##------ Thu Oct  1 17:39:57 2020 ------##
##------ Thu Oct  1 17:41:38 2020 ------##
closeAllConnections()
rm(list=ls())
setwd("~/Documentos/01.2020/Cátia & Sandra - Near Miss/Sandra/05. BNPA")
# Load Packages
library("bnpa")
library("car") # recode
# scriptBNPA.R
# Author: Elias Carvalho
# Period: 07/2019
# Clean environment
closeAllConnections()
rm(list=ls())
# Set Work Dir
setwd("~/Documentos/01.2020/00.Doutorado - Experimento - Final/04. BNPA")
# Load Packages
library("bnpa")
library("car") # recode
# Load training data
data.to.work.train <- read.csv("data.to.work.training.csv", sep = ',', header = TRUE,  colClasses=c('factor'))
data.to.work.train$X <- NULL
# Set base categories
levels(data.to.work.train$AGE)<-c("Adult","Elderly")
data.to.work.train$AGE<-relevel(data.to.work.train$AGE,"Adult")
levels(data.to.work.train$SEX)<-c("Male","Female")
data.to.work.train$SEX<-relevel(data.to.work.train$SEX,"Female")
levels(data.to.work.train$HBP)<-c("Has HBP","No HBP")
data.to.work.train$HBP<-relevel(data.to.work.train$HBP,"No HBP")
levels(data.to.work.train$DIA)<-c("Diabetic","No Diabetic")
data.to.work.train$DIA<-relevel(data.to.work.train$DIA,"No Diabetic")
levels(data.to.work.train$SMK)<-c("Smoker","Smoker","Smoker","Smoker","Smoker","No Smoker")
data.to.work.train$SMK<-relevel(data.to.work.train$SMK,"No Smoker")
levels(data.to.work.train$ALC)<-c("Alcoholic","Alcoholic","No Alcoholic")
data.to.work.train$ALC<-relevel(data.to.work.train$ALC,"No Alcoholic")
levels(data.to.work.train$BMI)<-c("Normal","Obese", "Overweight")
data.to.work.train$BMI<-relevel(data.to.work.train$BMI,"Normal")
levels(data.to.work.train$WRK)<-c("Work","No Work")
data.to.work.train$WRK<-relevel(data.to.work.train$WRK,"No Work")
levels(data.to.work.train$STK)<-c("Stroke","No Stroke")
data.to.work.train$STK<-relevel(data.to.work.train$STK,"No Stroke")
levels(data.to.work.train$RUN)<-c("Run","No Run")
data.to.work.train$RUN<-relevel(data.to.work.train$RUN,"No Run")
levels(data.to.work.train$WLK)<-c("Walk","No Walk")
data.to.work.train$WLK<-relevel(data.to.work.train$WLK,"No Walk")
levels(data.to.work.train$BYC)<-c("Bike","No Bike")
data.to.work.train$BYC<-relevel(data.to.work.train$BYC,"No Bike")
levels(data.to.work.train$INC)<-c("<20k","20k-39k","40k-59k","60k-79k","80k+")
data.to.work.train$INC<-relevel(data.to.work.train$INC,"<20k")
levels(data.to.work.train$HHD)<-c("Heart Disease","No Heart Disease")
data.to.work.train$HHD<-relevel(data.to.work.train$HHD,"No Heart Disease")
# Transform variables with more than 2 factor in ordered
data.to.work.train$BMI <- as.ordered(data.to.work.train$BMI)
data.to.work.train$INC <- as.ordered(data.to.work.train$INC)
# Print a summary of variables
summary(data.to.work.train)
# Set a bnlearn parameter
optimized.option="FALSE"
# Checking the Nas
bnpa::check.na(data.to.work.train)
# Set constrained-based algorithms to learn the structure BN
cb.algorithms = c("gs","iamb", "fast.iamb", "inter.iamb")
# Set score-based algorithms to learn the structure BN
sb.algorithms = c("hc","tabu")
# Create a black and white list (empty in the first momment)
white.list=""
black.list <- ""
# Set the outcome var(s)
type.var <- "o" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "HHD" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
# Set the predictor var(s)
type.var <- "P" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "AGE" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
type.var <- "P" # setting to outcome.predictor.var function to set a black list for outcome
var.name <- "SEX" # setting this variable as a tyṕically outcome
black.list <- bnpa::outcome.predictor.var(data.to.work.train, var.name, type.var, black.list)
# Start generation of BN and PA models
outcome.var = "HHD"
build.pa = 1
for(i in seq(from=100, to=1000, by=100))
{
#  stuff, such as
cat("\nBuilding BNPA with replicates =",i)
nreplicates = i
commandAssign <- paste("setwd('~/Documentos/01.2020/00.Doutorado - Experimento - Final/04. BNPA/",i,"')", sep = "")
eval(parse(text=commandAssign))
# Learn the BN Structure and Build the PA Model and it fit indexes
gera.bn.pa(data.to.work.train, white.list, black.list, nreplicates,
cb.algorithms, sb.algorithms, outcome.var, build.pa)
}
##------ Fri Oct  2 00:06:19 2020 ------##
##------ Fri Oct  2 00:09:55 2020 ------##
##------ Fri Oct  2 00:12:29 2020 ------##
##------ Fri Oct  2 00:16:09 2020 ------##
##------ Fri Oct  2 00:17:28 2020 ------##
##------ Fri Oct  2 00:18:38 2020 ------##
##------ Fri Oct  2 00:19:50 2020 ------##
##------ Fri Oct  2 00:21:15 2020 ------##
##------ Fri Oct  2 00:22:35 2020 ------##
##------ Fri Oct  2 00:24:00 2020 ------##
##------ Fri Oct  2 00:29:53 2020 ------##
##------ Fri Oct  2 00:35:46 2020 ------##
##------ Fri Oct  2 00:39:46 2020 ------##
##------ Fri Oct  2 00:45:40 2020 ------##
##------ Fri Oct  2 00:47:06 2020 ------##
##------ Fri Oct  2 00:48:27 2020 ------##
##------ Fri Oct  2 00:49:50 2020 ------##
##------ Fri Oct  2 00:51:36 2020 ------##
##------ Fri Oct  2 00:53:10 2020 ------##
##------ Fri Oct  2 00:54:47 2020 ------##
##------ Fri Oct  2 01:02:46 2020 ------##
##------ Fri Oct  2 01:11:17 2020 ------##
##------ Fri Oct  2 01:16:59 2020 ------##
##------ Fri Oct  2 01:25:55 2020 ------##
##------ Fri Oct  2 01:27:40 2020 ------##
##------ Fri Oct  2 01:29:13 2020 ------##
##------ Fri Oct  2 01:30:46 2020 ------##
##------ Fri Oct  2 01:33:00 2020 ------##
##------ Fri Oct  2 01:34:54 2020 ------##
##------ Fri Oct  2 01:36:47 2020 ------##
##------ Fri Oct  2 01:47:32 2020 ------##
##------ Fri Oct  2 01:58:12 2020 ------##
##------ Fri Oct  2 02:05:30 2020 ------##
##------ Fri Oct  2 02:17:03 2020 ------##
##------ Fri Oct  2 02:19:11 2020 ------##
##------ Fri Oct  2 02:20:58 2020 ------##
##------ Fri Oct  2 02:22:45 2020 ------##
##------ Fri Oct  2 02:25:27 2020 ------##
##------ Fri Oct  2 02:27:37 2020 ------##
##------ Fri Oct  2 02:29:50 2020 ------##
##------ Fri Oct  2 02:43:12 2020 ------##
##------ Fri Oct  2 02:57:15 2020 ------##
##------ Fri Oct  2 03:05:58 2020 ------##
##------ Fri Oct  2 03:19:54 2020 ------##
##------ Fri Oct  2 03:22:21 2020 ------##
##------ Fri Oct  2 03:24:22 2020 ------##
##------ Fri Oct  2 03:26:20 2020 ------##
##------ Fri Oct  2 03:29:24 2020 ------##
##------ Fri Oct  2 03:31:54 2020 ------##
##------ Fri Oct  2 03:34:27 2020 ------##
##------ Fri Oct  2 03:49:58 2020 ------##
##------ Fri Oct  2 04:05:48 2020 ------##
##------ Fri Oct  2 04:16:10 2020 ------##
##------ Fri Oct  2 04:32:17 2020 ------##
##------ Fri Oct  2 04:35:04 2020 ------##
##------ Fri Oct  2 04:37:15 2020 ------##
##------ Fri Oct  2 04:39:25 2020 ------##
##------ Fri Oct  2 04:42:53 2020 ------##
##------ Fri Oct  2 04:45:44 2020 ------##
##------ Fri Oct  2 04:48:35 2020 ------##
##------ Fri Oct  2 05:06:20 2020 ------##
##------ Fri Oct  2 05:24:37 2020 ------##
##------ Fri Oct  2 05:36:26 2020 ------##
##------ Fri Oct  2 05:55:54 2020 ------##
##------ Fri Oct  2 05:58:57 2020 ------##
##------ Fri Oct  2 06:01:18 2020 ------##
##------ Fri Oct  2 06:03:42 2020 ------##
##------ Fri Oct  2 06:07:39 2020 ------##
##------ Fri Oct  2 06:10:49 2020 ------##
##------ Fri Oct  2 06:13:57 2020 ------##
##------ Fri Oct  2 06:33:38 2020 ------##
##------ Fri Oct  2 06:54:44 2020 ------##
##------ Fri Oct  2 07:08:12 2020 ------##
##------ Fri Oct  2 07:30:28 2020 ------##
##------ Fri Oct  2 07:33:52 2020 ------##
##------ Fri Oct  2 07:36:28 2020 ------##
##------ Fri Oct  2 07:39:10 2020 ------##
##------ Fri Oct  2 07:43:42 2020 ------##
##------ Fri Oct  2 07:47:06 2020 ------##
##------ Fri Oct  2 07:50:32 2020 ------##
##------ Fri Oct  2 08:12:26 2020 ------##
##------ Fri Oct  2 08:35:52 2020 ------##
##------ Fri Oct  2 08:52:51 2020 ------##
##------ Fri Oct  2 09:20:08 2020 ------##
##------ Fri Oct  2 09:24:17 2020 ------##
##------ Fri Oct  2 09:27:20 2020 ------##
library(bnpa)
install.packages("semPlot")
install.packages("~/Downloads/carData_3.0-4.tar.gz", repos = NULL, type = "source")
install.packages("writexl")
library(bnpa)
install.packages("~/Documentos/00.Principal/R-Packages.new/bnpa_0.3.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Documentos/GitHub/SLU-Mortality-Suicide/SEM/R-Packages.new/bnpa_0.4.0.tar.gz", repos = NULL, type = "source")
closeAllConnections()
rm(list=ls())
graphics.off()
# Set working directory
setwd("~/Documentos/GitHub/SLU-Mortality-Suicide/SEM")
# Load Packages
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
library(bnpa) # gera.bn.pa
library(car) # linearHypothesis
library(faad) # testa.normalidade
library(foreign)
library(ggplot2)
library(jtools)  # summ
library(lmtest)
library(psych) # corPlot
library(plm) #
library(psych) # describeBy
library(readxl)
library(Rgraphviz)
library(stargazer)
library(table1)
library(tidyverse) # %>%
# Remove scientific notation, i.e.: instead of appearing 2.2 e-16 will appear: 0.00000000000000022
options(scipen=999)
# Go back to default setting
# options(scipen=0)
# Data :
#------------------------------------
# Panel of NN states from 2000 to 2020 (20 anos);
# Outcome Var: Death_Rate
# Predictor Vars: "Pop_Race", #"GDP_State", "Unemployment", "Poverty_State",
#                   "Median_Income", "HDI", "Suicide_Firearm_Crude_Rate"
# Load General Data (All states and all races-from 2000 to 2020)
data.to.work <- read_xlsx("data_to_work_geral_2023_02_19_SEM.xlsx")
# Set working directory
setwd("~/Documentos/GitHub/SLU-Mortality-Suicide/SEM/Results")
data.to.work$State <- NULL
data.to.work.sem.CA <- subset(data.to.work, Year > 2010 & CA>0,
select = c("SCD_AA",
"SCD_HI",
"SCD_WH",
"Gini_Index_State",
"Unemp_Race",
"HFR",
"Rural_Pop_State",
"HDI_State"
)
)
############### CA ###############
# Create an empty list or fill it before start
bl <- ""
wl <- ""
# Setting the type of var as typical "outcome" type what means it will not point to any variable
type.var <- "o"
# Setting variable "A" as "outcome" will create a black from this variable to all others
var.name <- "SCD_AA"
# Creating the black list
bl1 <- outcome.predictor.var(data.to.work.sem.CA, var.name, type.var, bl)
# Setting variable "A" as "outcome" will create a black from this variable to all others
var.name <- "SCD_HI"
# Creating the black list
bl2 <- outcome.predictor.var(data.to.work.sem.CA, var.name, type.var, bl)
# Setting variable "A" as "outcome" will create a black from this variable to all others
var.name <- "SCD_WH"
# Creating the black list
bl3 <- outcome.predictor.var(data.to.work.sem.CA, var.name, type.var, bl)
bl <- paste(bl1,",",bl2,",",bl3, sep = "")
outcome.var <- "SCD_AA"
bn.pa<-gera.bn.pa(
data.to.work.sem.CA,
white.list = "",
black.list = bl,
nreplicates = 1000,
cb.algorithms = c("gs", "iamb", "fast.iamb", "inter.iamb"),
sb.algorithms = c("hc"),
outcome.var,
build.pa = 0
)
